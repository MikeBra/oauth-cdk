"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoogleOAuthCdkStack = void 0;
const cdk = require("aws-cdk-lib");
const lambda = require("aws-cdk-lib/aws-lambda");
const apigateway = require("aws-cdk-lib/aws-apigateway");
const path = require("path");
class GoogleOAuthCdkStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        // Environment variables for the Lambda functions
        const environment = {
            GOOGLE_CLIENT_ID: process.env.GOOGLE_CLIENT_ID || "",
            GOOGLE_CLIENT_SECRET: process.env.GOOGLE_CLIENT_SECRET || "",
            REDIRECT_URI: process.env.REDIRECT_URI || "",
        };
        // OAuth Callback Lambda
        const oauthCallbackLambda = new lambda.Function(this, "OAuthCallbackHandler", {
            runtime: lambda.Runtime.NODEJS_18_X,
            handler: "oauth-callback.handler",
            code: lambda.Code.fromAsset(path.join(__dirname, "../src/lambda")),
            environment,
        });
        // Get User Info Lambda
        const getUserInfoLambda = new lambda.Function(this, "GetUserInfoHandler", {
            runtime: lambda.Runtime.NODEJS_18_X,
            handler: "get-user-info.handler",
            code: lambda.Code.fromAsset(path.join(__dirname, "../src/lambda")),
            environment,
        });
        // API Gateway
        const api = new apigateway.RestApi(this, "GoogleOAuthApi", {
            restApiName: "Google OAuth Service",
            description: "API Gateway for Google OAuth integration",
        });
        // OAuth callback endpoint
        const oauth = api.root.addResource("oauth");
        const callback = oauth.addResource("callback");
        callback.addMethod("GET", new apigateway.LambdaIntegration(oauthCallbackLambda));
        // User info endpoint
        const userInfo = api.root.addResource("userinfo");
        userInfo.addMethod("GET", new apigateway.LambdaIntegration(getUserInfoLambda));
    }
}
exports.GoogleOAuthCdkStack = GoogleOAuthCdkStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLW9hdXRoLWNkay1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdvb2dsZS1vYXV0aC1jZGstc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQWtDO0FBQ2xDLGlEQUFnRDtBQUNoRCx5REFBd0Q7QUFDeEQsNkJBQTRCO0FBRTVCLE1BQWEsbUJBQW9CLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFDakQsWUFBWSxLQUFjLEVBQUUsRUFBVSxFQUFFLEtBQXNCO1FBQzdELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBRXZCLGlEQUFpRDtRQUNqRCxNQUFNLFdBQVcsR0FBRztZQUNuQixnQkFBZ0IsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixJQUFJLEVBQUU7WUFDcEQsb0JBQW9CLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsSUFBSSxFQUFFO1lBQzVELFlBQVksRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksSUFBSSxFQUFFO1NBQzVDLENBQUE7UUFFRCx3QkFBd0I7UUFDeEIsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQzlDLElBQUksRUFDSixzQkFBc0IsRUFDdEI7WUFDQyxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXO1lBQ25DLE9BQU8sRUFBRSx3QkFBd0I7WUFDakMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLGVBQWUsQ0FBQyxDQUFDO1lBQ2xFLFdBQVc7U0FDWCxDQUNELENBQUE7UUFFRCx1QkFBdUI7UUFDdkIsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLG9CQUFvQixFQUFFO1lBQ3pFLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVc7WUFDbkMsT0FBTyxFQUFFLHVCQUF1QjtZQUNoQyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsZUFBZSxDQUFDLENBQUM7WUFDbEUsV0FBVztTQUNYLENBQUMsQ0FBQTtRQUVGLGNBQWM7UUFDZCxNQUFNLEdBQUcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLGdCQUFnQixFQUFFO1lBQzFELFdBQVcsRUFBRSxzQkFBc0I7WUFDbkMsV0FBVyxFQUFFLDBDQUEwQztTQUN2RCxDQUFDLENBQUE7UUFFRiwwQkFBMEI7UUFDMUIsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDM0MsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUM5QyxRQUFRLENBQUMsU0FBUyxDQUNqQixLQUFLLEVBQ0wsSUFBSSxVQUFVLENBQUMsaUJBQWlCLENBQUMsbUJBQW1CLENBQUMsQ0FDckQsQ0FBQTtRQUVELHFCQUFxQjtRQUNyQixNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUNqRCxRQUFRLENBQUMsU0FBUyxDQUNqQixLQUFLLEVBQ0wsSUFBSSxVQUFVLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLENBQUMsQ0FDbkQsQ0FBQTtJQUNGLENBQUM7Q0FDRDtBQXBERCxrREFvREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSBcImF3cy1jZGstbGliXCJcbmltcG9ydCAqIGFzIGxhbWJkYSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWxhbWJkYVwiXG5pbXBvcnQgKiBhcyBhcGlnYXRld2F5IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtYXBpZ2F0ZXdheVwiXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCJcblxuZXhwb3J0IGNsYXNzIEdvb2dsZU9BdXRoQ2RrU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xuXHRjb25zdHJ1Y3RvcihzY29wZTogY2RrLkFwcCwgaWQ6IHN0cmluZywgcHJvcHM/OiBjZGsuU3RhY2tQcm9wcykge1xuXHRcdHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpXG5cblx0XHQvLyBFbnZpcm9ubWVudCB2YXJpYWJsZXMgZm9yIHRoZSBMYW1iZGEgZnVuY3Rpb25zXG5cdFx0Y29uc3QgZW52aXJvbm1lbnQgPSB7XG5cdFx0XHRHT09HTEVfQ0xJRU5UX0lEOiBwcm9jZXNzLmVudi5HT09HTEVfQ0xJRU5UX0lEIHx8IFwiXCIsXG5cdFx0XHRHT09HTEVfQ0xJRU5UX1NFQ1JFVDogcHJvY2Vzcy5lbnYuR09PR0xFX0NMSUVOVF9TRUNSRVQgfHwgXCJcIixcblx0XHRcdFJFRElSRUNUX1VSSTogcHJvY2Vzcy5lbnYuUkVESVJFQ1RfVVJJIHx8IFwiXCIsXG5cdFx0fVxuXG5cdFx0Ly8gT0F1dGggQ2FsbGJhY2sgTGFtYmRhXG5cdFx0Y29uc3Qgb2F1dGhDYWxsYmFja0xhbWJkYSA9IG5ldyBsYW1iZGEuRnVuY3Rpb24oXG5cdFx0XHR0aGlzLFxuXHRcdFx0XCJPQXV0aENhbGxiYWNrSGFuZGxlclwiLFxuXHRcdFx0e1xuXHRcdFx0XHRydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMThfWCxcblx0XHRcdFx0aGFuZGxlcjogXCJvYXV0aC1jYWxsYmFjay5oYW5kbGVyXCIsXG5cdFx0XHRcdGNvZGU6IGxhbWJkYS5Db2RlLmZyb21Bc3NldChwYXRoLmpvaW4oX19kaXJuYW1lLCBcIi4uL3NyYy9sYW1iZGFcIikpLFxuXHRcdFx0XHRlbnZpcm9ubWVudCxcblx0XHRcdH1cblx0XHQpXG5cblx0XHQvLyBHZXQgVXNlciBJbmZvIExhbWJkYVxuXHRcdGNvbnN0IGdldFVzZXJJbmZvTGFtYmRhID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCBcIkdldFVzZXJJbmZvSGFuZGxlclwiLCB7XG5cdFx0XHRydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMThfWCxcblx0XHRcdGhhbmRsZXI6IFwiZ2V0LXVzZXItaW5mby5oYW5kbGVyXCIsXG5cdFx0XHRjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQocGF0aC5qb2luKF9fZGlybmFtZSwgXCIuLi9zcmMvbGFtYmRhXCIpKSxcblx0XHRcdGVudmlyb25tZW50LFxuXHRcdH0pXG5cblx0XHQvLyBBUEkgR2F0ZXdheVxuXHRcdGNvbnN0IGFwaSA9IG5ldyBhcGlnYXRld2F5LlJlc3RBcGkodGhpcywgXCJHb29nbGVPQXV0aEFwaVwiLCB7XG5cdFx0XHRyZXN0QXBpTmFtZTogXCJHb29nbGUgT0F1dGggU2VydmljZVwiLFxuXHRcdFx0ZGVzY3JpcHRpb246IFwiQVBJIEdhdGV3YXkgZm9yIEdvb2dsZSBPQXV0aCBpbnRlZ3JhdGlvblwiLFxuXHRcdH0pXG5cblx0XHQvLyBPQXV0aCBjYWxsYmFjayBlbmRwb2ludFxuXHRcdGNvbnN0IG9hdXRoID0gYXBpLnJvb3QuYWRkUmVzb3VyY2UoXCJvYXV0aFwiKVxuXHRcdGNvbnN0IGNhbGxiYWNrID0gb2F1dGguYWRkUmVzb3VyY2UoXCJjYWxsYmFja1wiKVxuXHRcdGNhbGxiYWNrLmFkZE1ldGhvZChcblx0XHRcdFwiR0VUXCIsXG5cdFx0XHRuZXcgYXBpZ2F0ZXdheS5MYW1iZGFJbnRlZ3JhdGlvbihvYXV0aENhbGxiYWNrTGFtYmRhKVxuXHRcdClcblxuXHRcdC8vIFVzZXIgaW5mbyBlbmRwb2ludFxuXHRcdGNvbnN0IHVzZXJJbmZvID0gYXBpLnJvb3QuYWRkUmVzb3VyY2UoXCJ1c2VyaW5mb1wiKVxuXHRcdHVzZXJJbmZvLmFkZE1ldGhvZChcblx0XHRcdFwiR0VUXCIsXG5cdFx0XHRuZXcgYXBpZ2F0ZXdheS5MYW1iZGFJbnRlZ3JhdGlvbihnZXRVc2VySW5mb0xhbWJkYSlcblx0XHQpXG5cdH1cbn1cbiJdfQ==