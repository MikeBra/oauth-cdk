"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.config = exports.getConfig = void 0;
const aws_sdk_1 = require("aws-sdk");
const secretsManager = new aws_sdk_1.SecretsManager();
const getConfig = async () => {
    if (process.env.SECRET_ARN) {
        const { SecretString } = await secretsManager
            .getSecretValue({ SecretId: process.env.SECRET_ARN })
            .promise();
        const secrets = JSON.parse(SecretString || "{}");
        return {
            googleClientId: secrets.GOOGLE_CLIENT_ID,
            googleClientSecret: secrets.GOOGLE_CLIENT_SECRET,
            redirectUri: secrets.REDIRECT_URI,
            // Add additional scopes as needed
            scopes: ["openid", "profile", "email"],
        };
    }
    // Fallback to environment variables for local development
    return {
        googleClientId: process.env.GOOGLE_CLIENT_ID,
        googleClientSecret: process.env.GOOGLE_CLIENT_SECRET,
        redirectUri: process.env.REDIRECT_URI,
        // Add additional scopes as needed
        scopes: ["openid", "profile", "email"],
    };
};
exports.getConfig = getConfig;
exports.config = {
    googleClientId: process.env.GOOGLE_CLIENT_ID,
    googleClientSecret: process.env.GOOGLE_CLIENT_SECRET,
    redirectUri: process.env.REDIRECT_URI,
    scopes: [
        "https://www.googleapis.com/auth/userinfo.profile",
        "https://www.googleapis.com/auth/userinfo.email",
    ],
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFDQUF3QztBQUV4QyxNQUFNLGNBQWMsR0FBRyxJQUFJLHdCQUFjLEVBQUUsQ0FBQTtBQUVwQyxNQUFNLFNBQVMsR0FBRyxLQUFLLElBQUksRUFBRTtJQUNuQyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDNUIsTUFBTSxFQUFFLFlBQVksRUFBRSxHQUFHLE1BQU0sY0FBYzthQUMzQyxjQUFjLENBQUMsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsQ0FBQzthQUNwRCxPQUFPLEVBQUUsQ0FBQTtRQUVYLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxDQUFBO1FBRWhELE9BQU87WUFDTixjQUFjLEVBQUUsT0FBTyxDQUFDLGdCQUFnQjtZQUN4QyxrQkFBa0IsRUFBRSxPQUFPLENBQUMsb0JBQW9CO1lBQ2hELFdBQVcsRUFBRSxPQUFPLENBQUMsWUFBWTtZQUNqQyxrQ0FBa0M7WUFDbEMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUM7U0FDdEMsQ0FBQTtJQUNGLENBQUM7SUFFRCwwREFBMEQ7SUFDMUQsT0FBTztRQUNOLGNBQWMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQjtRQUM1QyxrQkFBa0IsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQjtRQUNwRCxXQUFXLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZO1FBQ3JDLGtDQUFrQztRQUNsQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQztLQUN0QyxDQUFBO0FBQ0YsQ0FBQyxDQUFBO0FBekJZLFFBQUEsU0FBUyxhQXlCckI7QUFFWSxRQUFBLE1BQU0sR0FBRztJQUNyQixjQUFjLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBaUI7SUFDN0Msa0JBQWtCLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBcUI7SUFDckQsV0FBVyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBYTtJQUN0QyxNQUFNLEVBQUU7UUFDUCxrREFBa0Q7UUFDbEQsZ0RBQWdEO0tBQ2hEO0NBQ0QsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNlY3JldHNNYW5hZ2VyIH0gZnJvbSBcImF3cy1zZGtcIlxuXG5jb25zdCBzZWNyZXRzTWFuYWdlciA9IG5ldyBTZWNyZXRzTWFuYWdlcigpXG5cbmV4cG9ydCBjb25zdCBnZXRDb25maWcgPSBhc3luYyAoKSA9PiB7XG5cdGlmIChwcm9jZXNzLmVudi5TRUNSRVRfQVJOKSB7XG5cdFx0Y29uc3QgeyBTZWNyZXRTdHJpbmcgfSA9IGF3YWl0IHNlY3JldHNNYW5hZ2VyXG5cdFx0XHQuZ2V0U2VjcmV0VmFsdWUoeyBTZWNyZXRJZDogcHJvY2Vzcy5lbnYuU0VDUkVUX0FSTiB9KVxuXHRcdFx0LnByb21pc2UoKVxuXG5cdFx0Y29uc3Qgc2VjcmV0cyA9IEpTT04ucGFyc2UoU2VjcmV0U3RyaW5nIHx8IFwie31cIilcblxuXHRcdHJldHVybiB7XG5cdFx0XHRnb29nbGVDbGllbnRJZDogc2VjcmV0cy5HT09HTEVfQ0xJRU5UX0lELFxuXHRcdFx0Z29vZ2xlQ2xpZW50U2VjcmV0OiBzZWNyZXRzLkdPT0dMRV9DTElFTlRfU0VDUkVULFxuXHRcdFx0cmVkaXJlY3RVcmk6IHNlY3JldHMuUkVESVJFQ1RfVVJJLFxuXHRcdFx0Ly8gQWRkIGFkZGl0aW9uYWwgc2NvcGVzIGFzIG5lZWRlZFxuXHRcdFx0c2NvcGVzOiBbXCJvcGVuaWRcIiwgXCJwcm9maWxlXCIsIFwiZW1haWxcIl0sXG5cdFx0fVxuXHR9XG5cblx0Ly8gRmFsbGJhY2sgdG8gZW52aXJvbm1lbnQgdmFyaWFibGVzIGZvciBsb2NhbCBkZXZlbG9wbWVudFxuXHRyZXR1cm4ge1xuXHRcdGdvb2dsZUNsaWVudElkOiBwcm9jZXNzLmVudi5HT09HTEVfQ0xJRU5UX0lELFxuXHRcdGdvb2dsZUNsaWVudFNlY3JldDogcHJvY2Vzcy5lbnYuR09PR0xFX0NMSUVOVF9TRUNSRVQsXG5cdFx0cmVkaXJlY3RVcmk6IHByb2Nlc3MuZW52LlJFRElSRUNUX1VSSSxcblx0XHQvLyBBZGQgYWRkaXRpb25hbCBzY29wZXMgYXMgbmVlZGVkXG5cdFx0c2NvcGVzOiBbXCJvcGVuaWRcIiwgXCJwcm9maWxlXCIsIFwiZW1haWxcIl0sXG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcblx0Z29vZ2xlQ2xpZW50SWQ6IHByb2Nlc3MuZW52LkdPT0dMRV9DTElFTlRfSUQhLFxuXHRnb29nbGVDbGllbnRTZWNyZXQ6IHByb2Nlc3MuZW52LkdPT0dMRV9DTElFTlRfU0VDUkVUISxcblx0cmVkaXJlY3RVcmk6IHByb2Nlc3MuZW52LlJFRElSRUNUX1VSSSEsXG5cdHNjb3BlczogW1xuXHRcdFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC91c2VyaW5mby5wcm9maWxlXCIsXG5cdFx0XCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL3VzZXJpbmZvLmVtYWlsXCIsXG5cdF0sXG59XG4iXX0=