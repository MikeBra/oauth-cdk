"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.config = exports.getConfig = void 0;
const client_secrets_manager_1 = require("@aws-sdk/client-secrets-manager");
const secretsManager = new client_secrets_manager_1.SecretsManager({});
const getConfig = async () => {
    if (process.env.SECRET_ARN) {
        const { SecretString } = await secretsManager.getSecretValue({
            SecretId: process.env.SECRET_ARN,
        });
        const secrets = JSON.parse(SecretString || "{}");
        return {
            googleClientId: secrets.GOOGLE_CLIENT_ID,
            googleClientSecret: secrets.GOOGLE_CLIENT_SECRET,
            redirectUri: secrets.REDIRECT_URI,
            // Add additional scopes as needed
            scopes: ["openid", "profile", "email"],
        };
    }
    // Fallback to environment variables for local development
    return {
        googleClientId: process.env.GOOGLE_CLIENT_ID,
        googleClientSecret: process.env.GOOGLE_CLIENT_SECRET,
        redirectUri: process.env.REDIRECT_URI,
        // Add additional scopes as needed
        scopes: ["openid", "profile", "email"],
    };
};
exports.getConfig = getConfig;
exports.config = {
    googleClientId: process.env.GOOGLE_CLIENT_ID,
    googleClientSecret: process.env.GOOGLE_CLIENT_SECRET,
    redirectUri: process.env.REDIRECT_URI,
    scopes: [
        "https://www.googleapis.com/auth/userinfo.profile",
        "https://www.googleapis.com/auth/userinfo.email",
    ],
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDRFQUFnRTtBQUVoRSxNQUFNLGNBQWMsR0FBRyxJQUFJLHVDQUFjLENBQUMsRUFBRSxDQUFDLENBQUE7QUFFdEMsTUFBTSxTQUFTLEdBQUcsS0FBSyxJQUFJLEVBQUU7SUFDbkMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQzVCLE1BQU0sRUFBRSxZQUFZLEVBQUUsR0FBRyxNQUFNLGNBQWMsQ0FBQyxjQUFjLENBQUM7WUFDNUQsUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVTtTQUNoQyxDQUFDLENBQUE7UUFFRixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsQ0FBQTtRQUVoRCxPQUFPO1lBQ04sY0FBYyxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0I7WUFDeEMsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLG9CQUFvQjtZQUNoRCxXQUFXLEVBQUUsT0FBTyxDQUFDLFlBQVk7WUFDakMsa0NBQWtDO1lBQ2xDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDO1NBQ3RDLENBQUE7SUFDRixDQUFDO0lBRUQsMERBQTBEO0lBQzFELE9BQU87UUFDTixjQUFjLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0I7UUFDNUMsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0I7UUFDcEQsV0FBVyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWTtRQUNyQyxrQ0FBa0M7UUFDbEMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUM7S0FDdEMsQ0FBQTtBQUNGLENBQUMsQ0FBQTtBQXpCWSxRQUFBLFNBQVMsYUF5QnJCO0FBRVksUUFBQSxNQUFNLEdBQUc7SUFDckIsY0FBYyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWlCO0lBQzdDLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQXFCO0lBQ3JELFdBQVcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQWE7SUFDdEMsTUFBTSxFQUFFO1FBQ1Asa0RBQWtEO1FBQ2xELGdEQUFnRDtLQUNoRDtDQUNELENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZWNyZXRzTWFuYWdlciB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtc2VjcmV0cy1tYW5hZ2VyXCJcblxuY29uc3Qgc2VjcmV0c01hbmFnZXIgPSBuZXcgU2VjcmV0c01hbmFnZXIoe30pXG5cbmV4cG9ydCBjb25zdCBnZXRDb25maWcgPSBhc3luYyAoKSA9PiB7XG5cdGlmIChwcm9jZXNzLmVudi5TRUNSRVRfQVJOKSB7XG5cdFx0Y29uc3QgeyBTZWNyZXRTdHJpbmcgfSA9IGF3YWl0IHNlY3JldHNNYW5hZ2VyLmdldFNlY3JldFZhbHVlKHtcblx0XHRcdFNlY3JldElkOiBwcm9jZXNzLmVudi5TRUNSRVRfQVJOLFxuXHRcdH0pXG5cblx0XHRjb25zdCBzZWNyZXRzID0gSlNPTi5wYXJzZShTZWNyZXRTdHJpbmcgfHwgXCJ7fVwiKVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGdvb2dsZUNsaWVudElkOiBzZWNyZXRzLkdPT0dMRV9DTElFTlRfSUQsXG5cdFx0XHRnb29nbGVDbGllbnRTZWNyZXQ6IHNlY3JldHMuR09PR0xFX0NMSUVOVF9TRUNSRVQsXG5cdFx0XHRyZWRpcmVjdFVyaTogc2VjcmV0cy5SRURJUkVDVF9VUkksXG5cdFx0XHQvLyBBZGQgYWRkaXRpb25hbCBzY29wZXMgYXMgbmVlZGVkXG5cdFx0XHRzY29wZXM6IFtcIm9wZW5pZFwiLCBcInByb2ZpbGVcIiwgXCJlbWFpbFwiXSxcblx0XHR9XG5cdH1cblxuXHQvLyBGYWxsYmFjayB0byBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZm9yIGxvY2FsIGRldmVsb3BtZW50XG5cdHJldHVybiB7XG5cdFx0Z29vZ2xlQ2xpZW50SWQ6IHByb2Nlc3MuZW52LkdPT0dMRV9DTElFTlRfSUQsXG5cdFx0Z29vZ2xlQ2xpZW50U2VjcmV0OiBwcm9jZXNzLmVudi5HT09HTEVfQ0xJRU5UX1NFQ1JFVCxcblx0XHRyZWRpcmVjdFVyaTogcHJvY2Vzcy5lbnYuUkVESVJFQ1RfVVJJLFxuXHRcdC8vIEFkZCBhZGRpdGlvbmFsIHNjb3BlcyBhcyBuZWVkZWRcblx0XHRzY29wZXM6IFtcIm9wZW5pZFwiLCBcInByb2ZpbGVcIiwgXCJlbWFpbFwiXSxcblx0fVxufVxuXG5leHBvcnQgY29uc3QgY29uZmlnID0ge1xuXHRnb29nbGVDbGllbnRJZDogcHJvY2Vzcy5lbnYuR09PR0xFX0NMSUVOVF9JRCEsXG5cdGdvb2dsZUNsaWVudFNlY3JldDogcHJvY2Vzcy5lbnYuR09PR0xFX0NMSUVOVF9TRUNSRVQhLFxuXHRyZWRpcmVjdFVyaTogcHJvY2Vzcy5lbnYuUkVESVJFQ1RfVVJJISxcblx0c2NvcGVzOiBbXG5cdFx0XCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL3VzZXJpbmZvLnByb2ZpbGVcIixcblx0XHRcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvdXNlcmluZm8uZW1haWxcIixcblx0XSxcbn1cbiJdfQ==